---
title: "Final"
subtitle: "Eli Dewald"
date: "May 27, 2025"
format: html
toc: true
---
[GitHub Repository](https://github.com/eliasdewald/ENVS-193DS_spring-2025_final)
```{r}
#| message: false # make messages not show
#| warning: false # make warnings not show

library(tidyverse) # general use
library(here) # file organization
library(MuMIn) # choosing best model
library(janitor) # cleaning data frames
library(DHARMa) # running model diagnostics
library(lubridate) # cleaning up dates

sst <- read.csv( # read in data
  here("data", "SST_update2023.csv")) # set file path
nest_boxes <- read.csv( # read in data
  here("data", "occdist.csv")) |> # set file path
  clean_names() # clean column names
```

# Problem 1. Research writing 

## a. 

In part 1, they conducted a Pearson's correlation coefficient test to study the correlation between the two variables. In part 2, they conducted an ANOVA test to study whether there were significant differences in means between more than two sources.

## b. 

A Tukey's multiple comparisons of mean test could be used to find Tukey's HSD, which would be useful for discerning which sources have significant differences between them in average nitrogen load (kg year-1). Running an Effect Size for an ANOVA test could be used to find η~2~, which would be useful to study how much source explains average nitrogen load (kg year-1). 

## c. 

We found a [blank] (r = correlation coefficient) correlation between distance from headwater (km) and annual total nitrogen load (kg year-1) (Pearson' R test, t(degrees of freedom) = t-statistic, p = 0.03, α = significance level). 

We found a [blank] (η~2~ = effect size) difference between sources (urban land, atmospheric deposition, fertilizer, wastewater treatment, and grasslands) in nitrogen load (kg year-1) (one-way ANOVA, f(among groups degrees of freedom, within groups degrees of freedom) = f-statistic, p = 0.02, α = significance level). On average, [blank] sources tended to have [blank] nitrogen load than [blank, etc.] (Tukey HSD, 95% CI:[lower bound, upper bound] (kg year-1)) sources. 

# Problem 2. Data visualization

## a. 

```{r}
#| message: false
sst_clean <- sst |> # create new object from sst
  mutate(date = as_date(date),
         year = year (date),
         month = month(date)) |>  # make sure date is a date
  filter(date > as_date("2017-12-31")) |> 
  # filter to only includes dates from 2018 and after
  select(year, month, temp) |>  # select columns of interest
  group_by(year, month) |> # group by month and year
  summarize(mean_monthly_sst = mean(temp, na.rm = TRUE)) |> 
  # calculate monthly mean sst
  mutate(year = as_factor(year), # make sure year is a factor
         year = fct_relevel(year, # change year factor levels to YYYY format
            "2018", "2019", "2020", "2021", "2022", "2023")) |> 
  mutate(month = case_when( # rename values
    month == "1" ~ "Jan", # change "1" to "Jan"
    month == "2" ~ "Feb", # change "2" to "Feb"
    month == "3" ~ "Mar", # change "3" to "Mar"
    month == "4" ~ "Apr", # change "4" to "Apr"
    month == "5" ~ "May", # change "5" to "May"
    month == "6" ~ "Jun", # change "6" to "Jun"
    month == "7" ~ "Jul", # change "7" to "Jul"
    month == "8" ~ "Aug", # change "8" to "Aug"
    month == "9" ~ "Sep", # change "9" to "Sep"
    month == "10" ~ "Oct", # change "10" to "Oct"
    month == "11" ~ "Nov", # change "11" to "Nov"
    month == "12" ~ "Dec"), # change "12" to "Dec"
    month = ordered(month),
    month = fct_relevel(month,
            "Jan", "Feb", "Mar", "Apr", "May", "Jun", 
            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) |>
  ungroup() # ungroup data frame
slice_sample(sst_clean, # slice sst_clean data frame
             n = 5) # display 5 rows
str(sst_clean) # display structure of sst_clean data frame
```

## b. 

```{r}
#| fig-height: 5 # set figure height
#| fig-width: 8 # set figure width

plot <- ggplot(data = sst_clean, # plot new object with sst_clean data frame
       aes(x = month, # set x-axis
           y = mean_monthly_sst, # set y-axis
           group = year, # group as year
           color = year)) + # color by  year
  geom_point() + # add points
  geom_line(linewidth = 1) + # add lines
  labs(x = "Month", # label x-axis
       y = "Mean monthly sea surface temperature (°C)", # label y-axis
       color = "Year") +  # label legend
  theme(panel.background = element_rect("white"), # make background white
        panel.grid = element_blank(), # remove grid
        legend.position = "inside", # set legend position to inside
        legend.position.inside = c(0.09, 0.7), # control inside position of legend
        panel.border = element_rect(color = "black", # add black outline to plot
                                    fill = NA, # make sure there is no fill within border
                                    linewidth = 1), # set outline size
        legend.text = element_text(size = 10)) + # set size of legend
  scale_color_manual(values = c("2018" = "#56B1F7", "2019" = "#428AC2", "2020" = "#3670A0", "2021" = "#2A5880", "2022" = "#1E4160", "2023" = "#132B43"))
# set color for each year

plot # display plot
```

# Problem 3. Data analysis

## a. 

The 1s and 0s denote whether the species named in the column title is or isn't present in the nest box. 1 means that the species is present, and 0 means that specific species is not present. 

## b. 

Swift Parrots differ from Common Starling and Tree Martin due to being at high risk of extinction. Consequently, nest boxes have been built to support Swift Parrots, but the other study species are competitors which can exploit the nest boxes.

## c. 

The seasons mentioned in the study are two different breeding seasons where Swift Parrots were actively breeding at the study. Nest boxes were deployed during the 2016 breeding season and had been left there for a few years by the 2019 breeding season.

## d. 

| Model number | Season | Distance to forest edge | Description                         |
|:------------:|:------:|:-----------------------:|:------------------------------------|  
| 0            |        |                         | no predictors (null model)          |
| 1            |    X   |            X            | both predictors (saturated model)   |
| 2            |    X   |                         | season only                         |
| 3            |        |            X            | distance to forest edge only        | 

## e. 

```{r}
model0 <- lm(sp ~ 1, # creating new object of linear model with no predictors
  data = nest_boxes) # set data frame
model1 <- lm(sp ~ season + edge_distance, 
             # creating new object of linear model with both predictors
  data = nest_boxes) # set data frame
model2 <- lm(sp ~ season, # creating new object of linear model with season as predictor
  data = nest_boxes) # set data frame
model3 <- lm(sp ~ edge_distance, 
            # creating new object of linear model with distance to forest edge as predictor
  data = nest_boxes) # set data frame
```

## f. 

```{r}
par(mfrow = c(2,2)) # run model diagnostics
plot(model0) # plot model0 diagnostics
plot(model1) # plot model1 diagnostics
plot(model2) # plot model2 diagnostics
plot(model3) # plot model3 diagnostics
```

